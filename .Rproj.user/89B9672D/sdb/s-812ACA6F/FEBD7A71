{
    "collab_server" : "",
    "contents" : "load('./data/EPSatlas.RData')\nload('./data/atlasIndex.RData')\nload('./data/c18_heart_ontology.RData')\n\n\nrcp.to.atlas<-function(registration, segmentation, atlas='c18heart'){\n  featureregion <- rep(NA, length(segmentation$x))\n  featurecolor <- rep(\"#000000\", length(segmentation$x))\n  \n  coordinate <- registration$coordinate\n  k <- which(abs(coordinate - atlasIndex$mm.from.origin) ==\n               min(abs(coordinate - atlasIndex$mm.from.origin)))\n  scale.factor <- mean(c(dim(registration$transformationgrid$mx)[1]/registration$transformationgrid$height,\n                         dim(registration$transformationgrid$mx)[2]/registration$transformationgrid$width))\n  \n  outlines <- registration$atlas$outlines\n  plate.info <- EPSatlas$plate.info[[k]]\n  namelist<-plate.info$acronym\n  colorlist<-plate.info$unique.col\n  \n  for(i in 2:length(outlines)){\n    if(EPSatlas$plates[[k]]@paths[i]$path@rgb != '#000000'){\n      temp<-point.in.polygon(segmentation$x, segmentation$y, c(outlines[[i]]$xT/scale.factor),c(outlines[[i]]$yT/scale.factor) )\n      color.id<-as.character( ontology$unique.col[which(ontology$adj.col== EPSatlas$plates[[k]]@paths[i]$path@rgb  )] )\n      featurecolor[which(temp==1)]<-color.id\n      featureregion[which(temp==1)]<-as.character(ontology$acronym[which(ontology$unique.col==color.id)])\n      \n    }\n  }\n  \n  \n  segmentation$acronym <- featureregion\n  segmentation$color <- featurecolor\n  dataset <- data.frame(x = segmentation$x, y = segmentation$y, intensity = segmentation$intensity, area = segmentation$area, id = ontology$id[match(segmentation$acronym, ontology$acronym)], color = segmentation$color, acronym = segmentation$acronym)\n  \n  index <- round(scale.factor * cbind( dataset$y,  dataset$x ))\n  index[index == 0] <- 1\n  if (length(which(index[, 1] > dim(registration$transformationgrid$mxF)[1]))) {\n    index[which(index[, 1] > dim(registration$transformationgrid$mxF)[1]),\n          1] <- dim(registration$transformationgrid$mxF)[1]\n  }\n  if (length(which(index[, 2] > dim(registration$transformationgrid$mxF)[2]))) {\n    index[which(index[, 2] > dim(registration$transformationgrid$mxF)[2]),\n          2] <- dim(registration$transformationgrid$mxF)[2]\n  }\n  \n  scale.factor <- mean(dim(registration$transformationgrid$mx)/c(registration$transformationgrid$height,\n                                                                 registration$transformationgrid$width))\n  \n  somaX <- registration$transformationgrid$mxF[index]\n  somaY <- registration$transformationgrid$myF[index]\n  \n  \n  right.left<-(somaX - registration$atlas$outlines[[1]]$x[1])*(532/diff(registration$atlas$outlines[[1]]$x[1:2]))\n  rostral.caudal<-(somaY - registration$atlas$outlines[[1]]$y[1])*(598/diff(registration$atlas$outlines[[1]]$y[c(1,4)]))\n  \n  dataset$right.left <- right.left\n  dataset$rostral.caudal <- rostral.caudal\n  \n  \n  return(dataset)\n}\n\n\nplot.regi<-function(registration=regi, main = NULL, border = rgb(154, 73, 109,\n                                                                 maxColorValue = 255), draw.trans.grid = FALSE, batch.mode = FALSE){\n  scale.factor <- mean(dim(registration$transformationgrid$mx)/c(registration$transformationgrid$height,\n                                                                 registration$transformationgrid$width))\n  xMax <- max(c(registration$transformationgrid$mx, registration$transformationgrid$mxF),\n              na.rm = TRUE) * (1/scale.factor)\n  xMin <- min(c(registration$transformationgrid$mx, registration$transformationgrid$mxF),\n              na.rm = TRUE) * (1/scale.factor)\n  yMax <- max(c(registration$transformationgrid$my, registration$transformationgrid$myF),\n              na.rm = TRUE) * (1/scale.factor)\n  yMin <- min(c(registration$transformationgrid$my, registration$transformationgrid$myF),\n              na.rm = TRUE) * (1/scale.factor)\n  main.title <- main\n  if (is.null(main)) {\n    main.title <- basename(registration$outputfile)\n  }\n  plot(c(xMin, xMax), c(yMin, yMax), ylim = c(yMax, yMin),\n       xlim = c(xMin, xMax), asp = 1, axes = F, xlab = \"\", ylab = \"\",\n       col = 0, main = main.title, font.main = 1)\n  polygon(c(0, rep(registration$transformationgrid$width, 2),\n            0), c(0, 0, rep(registration$transformationgrid$height,\n                            2)))\n  img <- paste(registration$outputfile, \"_undistorted.png\",\n               sep = \"\")\n  img <- readPNG(img)\n  img = as.raster(img[, ])\n  if (batch.mode) {\n    img <- apply(img, 2, rev)\n  }\n  rasterImage(img, 0, 0, registration$transformationgrid$width,\n              registration$transformationgrid$height)\n  if (!is.null(border)) {\n    lapply(1:registration$atlas$numRegions, function(x) {\n      polygon(registration$atlas$outlines[[x]]$xT/scale.factor,\n              registration$atlas$outlines[[x]]$yT/scale.factor,\n              border = border)\n    })\n  }\n  if (draw.trans.grid) {\n    hei<-dim(registration$transformationgrid$mx)[1]\n    wid<-dim(registration$transformationgrid$mx)[2]\n    \n    lapply(seq(1, hei, by = 50), function(x) {\n      lines(registration$transformationgrid$mx[x, ]/scale.factor,\n            registration$transformationgrid$my[x, ]/scale.factor,\n            col = \"lightblue\")\n    })\n    lines(registration$transformationgrid$mx[hei, ]/scale.factor,\n          registration$transformationgrid$my[hei, ]/scale.factor,\n          col = \"lightblue\")\n    lapply(seq(1, wid, by = 50), function(x) {\n      lines(registration$transformationgrid$mx[, x]/scale.factor,\n            registration$transformationgrid$my[, x]/scale.factor,\n            col = \"lightblue\")\n    })\n    lines(registration$transformationgrid$mx[, wid]/scale.factor,\n          registration$transformationgrid$my[, wid]/scale.factor,\n          col = \"lightblue\")\n  }\n}\n\n",
    "created" : 1558681068187.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1344394802",
    "id" : "FEBD7A71",
    "lastKnownWriteTime" : 1558681814,
    "last_content_update" : 1558681814083,
    "path" : "~/Documents/GitHub/RCPatlas/r/helper_functions.R",
    "project_path" : "r/helper_functions.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}